mse_sum <- my_df %>%
group_by(k) %>%
summarise(mean = mean(mse), sd = sd(mse))
kable_styling(kable(mse_sum))
devtools::check()
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
require(HaoZheng)
library(randomForest)
library(stringr)
library(class)
library(ggplot2)
library(kableExtra)
library(dplyr,warn.conflicts = FALSE)
data("my_gapminder")
data("my_penguins")
my_t.test(my_gapminder$lifeExp, "two.sided", 60)
my_t.test(my_gapminder$lifeExp, "less", 60)
my_t.test(my_gapminder$lifeExp, "greater", 60)
lm_1 <- my_lm(lifeExp ~ gdpPercap + continent, data = my_gapminder)
lm_1
object <- lifeExp ~ gdpPercap + continent
model <- model.frame(object, my_gapminder)
# find the explanatory variable x
exp  <- model.matrix(object, my_gapminder)
# find the response variable y
res <- model.response(model) %>% as.matrix()
my_lifeExp <- exp %*% lm_1[,1]+ lm_1[,2]
my_plot <- data.frame("actual" = my_gapminder$lifeExp, "fitted" = my_lifeExp,
"color" = my_gapminder$continent)
my_plot %>%
ggplot(aes(x = my_lifeExp, y = my_gapminder$lifeExp, color = color)) +
geom_point() +
coord_flip() +
labs(title = "Actual vs. Fitted Values", x = "fitted",
y = "actual", color = "Continent")
# TODO: my_knn function is wrong for some output
answer <- matrix(NA, nrow = 10, ncol = 2)
rownames(answer) <- c(1:10)
for (i in 1:10) {
output <- my_knn_cv(my_penguins_df[,3:6], my_penguins_df$species, i, 5)
answer[i, 1] <- output$ce
answer[i, 2] <- output$te
}
answer <- data.frame("Neighbour's number" = c(1:10),
"cv misclassification rate" = answer[, 1],
"training misclassification rate" = answer[, 2])
kable_styling(kable(answer))
options(dplyr.summarise.inform = FALSE)
cv_error <- matrix(NA, nrow = 30 * 3, ncol = 2)
cv_error[, 1] <- rep(c(2, 5, 10), each = 30)
row <- 0
for(k in c(2, 5, 10)) {
for(i in 0:29) {
row <- row + 1
cv_error[row, 2] <- my_rf_cv(k)
}
}
my_df <- data.frame("mse" = cv_error[, 2], "k" = cv_error[, 1])
my_df %>%
ggplot(aes(x = factor(k), y = mse)) +
geom_boxplot() +
labs(title = "MSE", x = "Folds number", y = "MSE")
mse_sum <- my_df %>%
group_by(k) %>%
summarise(mean = mean(mse), sd = sd(mse))
kable_styling(kable(mse_sum))
devtools::check()
.Last.error.trace
devtools::check()
require(HaoZheng)
library(randomForest)
library(stringr)
library(class)
library(ggplot2)
library(kableExtra)
library(dplyr,warn.conflicts = FALSE)
data("my_gapminder")
data("my_penguins")
my_penguins_df <- my_penguins
my_penguins_df <- na.omit(my_penguins_df)
# TODO: my_knn function is wrong for the output
answer <- matrix(NA, nrow = 10, ncol = 2)
rownames(answer) <- c(1:10)
for (i in 1:10) {
output <- my_knn_cv(my_penguins_df[,3:6], my_penguins_df$species, i, 5)
answer[i, 1] <- output$ce
answer[i, 2] <- output$te
}
answer <- data.frame("Neighbour's number" = c(1:10),
"cv misclassification rate" = answer[, 1],
"training misclassification rate" = answer[, 2])
kable_styling(kable(answer))
devtools::check()
install.packges("class")
install.packages("class")
library(class)
devtools::document()
devlto
devtools::check()
devtools::document()
devtools::check()
usethis::use_pipe()
devtools::check()
data(my_penguins)
my_penguins <- drop_na(my_penguins)
my_knn_cv(my_penguins[, 3:6], my_penguins$species, 1, 5)
data(my_penguins)
my_penguins <- tidyr::drop_na(my_penguins)
my_knn_cv(my_penguins[, 3:6], my_penguins$species, 1, 5)
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
data("my_penguins")
options(dplyr.summarise.inform = FALSE)
cv_error <- matrix(NA, nrow = 30 * 3, ncol = 2)
cv_error[, 1] <- rep(c(2, 5, 10), each = 30)
row <- 0
for(k in c(2, 5, 10)) {
for(i in 0:29) {
row <- row + 1
cv_error[row, 2] <- my_rf_cv(k)
}
}
View(my_penguins)
View(my_penguins)
require(HaoZheng)
library(randomForest)
library(stringr)
library(class)
library(ggplot2)
library(kableExtra)
library(dplyr,warn.conflicts = FALSE)
data("my_gapminder")
data("my_penguins")
my_penguins_df <- my_penguins
my_penguins_df <- na.omit(my_penguins_df)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
require(HaoZheng)
library(randomForest)
library(stringr)
library(class)
library(ggplot2)
library(kableExtra)
library(dplyr,warn.conflicts = FALSE)
data("my_gapminder")
data("my_penguins")
my_penguins_df <- my_penguins
my_penguins_df <- na.omit(my_penguins_df)
my_t.test(my_gapminder$lifeExp, "two.sided", 60)
my_t.test(my_gapminder$lifeExp, "less", 60)
my_t.test(my_gapminder$lifeExp, "greater", 60)
lm_1 <- my_lm(lifeExp ~ gdpPercap + continent, data = my_gapminder)
lm_1
object <- lifeExp ~ gdpPercap + continent
model <- model.frame(object, my_gapminder)
exp  <- model.matrix(object, my_gapminder)
res <- model.response(model) %>% as.matrix()
my_lifeExp <- exp %*% lm_1[,1]+ lm_1[,2]
my_plot <- data.frame("actual" = my_gapminder$lifeExp, "fitted" = my_lifeExp,
"color" = my_gapminder$continent)
my_plot %>%
ggplot(aes(x = my_lifeExp, y = my_gapminder$lifeExp, color = color)) +
geom_point() +
coord_flip() +
labs(title = "Actual vs. Fitted Values", x = "fitted",
y = "actual", color = "Continent")
# TODO: my_knn function is wrong for the output
answer <- matrix(NA, nrow = 10, ncol = 2)
rownames(answer) <- c(1:10)
for (i in 1:10) {
output <- my_knn_cv(my_penguins_df[,3:6], my_penguins_df$species, i, 5)
answer[i, 1] <- output$ce
answer[i, 2] <- output$te
}
answer <- data.frame("Neighbour's number" = c(1:10),
"cv misclassification rate" = answer[, 1],
"training misclassification rate" = answer[, 2])
kable_styling(kable(answer))
data("my_penguins")
options(dplyr.summarise.inform = FALSE)
cv_error <- matrix(NA, nrow = 30 * 3, ncol = 2)
cv_error[, 1] <- rep(c(2, 5, 10), each = 30)
row <- 0
for(k in c(2, 5, 10)) {
for(i in 0:29) {
row <- row + 1
cv_error[row, 2] <- my_rf_cv(k)
}
}
data("my_penguins")
options(dplyr.summarise.inform = FALSE)
cv_error <- matrix(NA, nrow = 30 * 3, ncol = 2)
cv_error[, 1] <- rep(c(2, 5, 10), each = 30)
row <- 0
for(k in c(2, 5, 10)) {
for(i in 0:29) {
row <- row + 1
cv_error[row, 2] <- my_rf_cv(k)
}
}
data("my_penguins")
options(dplyr.summarise.inform = FALSE)
cv_error <- matrix(NA, nrow = 30 * 3, ncol = 2)
cv_error[, 1] <- rep(c(2, 5, 10), each = 30)
row <- 1
for(k in c(2, 5, 10)) {
for(i in 1:30) {
cv_error[row, 2] <- my_rf_cv(k)
row <- row + 1
}
}
data("my_penguins")
options(dplyr.summarise.inform = FALSE)
cv_error <- matrix(NA, nrow = 30 * 3, ncol = 2)
cv_error[, 1] <- rep(c(2, 5, 10), each = 30)
row <- 0
for(k in c(2, 5, 10)) {
for(i in 0:29) {
row <- row + 1
cv_error[row, 2] <- my_rf_cv(k)
}
}
data("my_penguins")
options(dplyr.summarise.inform = FALSE)
cv_error <- matrix(NA, nrow = 30 * 3, ncol = 2)
cv_error[, 1] <- rep(c(2, 5, 10), each = 30)
row <- 0
for(k in c(2, 5, 10)) {
for(i in 0:29) {
row <- row + 1
cv_error[row, 2] <- my_rf_cv(k)
}
}
data("my_penguins")
options(dplyr.summarise.inform = FALSE)
cv_error <- matrix(NA, nrow = 30 * 3, ncol = 2)
cv_error[, 1] <- rep(c(2, 5, 10), each = 30)
row <- 0
for(k in c(2, 5, 10)) {
for(i in 0:29) {
row <- row + 1
cv_error[row, 2] <- my_rf_cv(k)
}
}
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
require(HaoZheng)
library(randomForest)
library(stringr)
library(class)
library(ggplot2)
library(kableExtra)
library(dplyr,warn.conflicts = FALSE)
data("my_gapminder")
data("my_penguins")
my_penguins_df <- my_penguins
my_penguins_df <- na.omit(my_penguins_df)
my_t.test(my_gapminder$lifeExp, "two.sided", 60)
my_t.test(my_gapminder$lifeExp, "less", 60)
my_t.test(my_gapminder$lifeExp, "greater", 60)
lm_1 <- my_lm(lifeExp ~ gdpPercap + continent, data = my_gapminder)
lm_1
object <- lifeExp ~ gdpPercap + continent
model <- model.frame(object, my_gapminder)
exp  <- model.matrix(object, my_gapminder)
res <- model.response(model) %>% as.matrix()
my_lifeExp <- exp %*% lm_1[,1]+ lm_1[,2]
my_plot <- data.frame("actual" = my_gapminder$lifeExp, "fitted" = my_lifeExp,
"color" = my_gapminder$continent)
my_plot %>%
ggplot(aes(x = my_lifeExp, y = my_gapminder$lifeExp, color = color)) +
geom_point() +
coord_flip() +
labs(title = "Actual vs. Fitted Values", x = "fitted",
y = "actual", color = "Continent")
# TODO: my_knn function is wrong for the output
answer <- matrix(NA, nrow = 10, ncol = 2)
rownames(answer) <- c(1:10)
for (i in 1:10) {
output <- my_knn_cv(my_penguins_df[,3:6], my_penguins_df$species, i, 5)
answer[i, 1] <- output$ce
answer[i, 2] <- output$te
}
answer <- data.frame("Neighbour's number" = c(1:10),
"cv misclassification rate" = answer[, 1],
"training misclassification rate" = answer[, 2])
kable_styling(kable(answer))
data("my_penguins")
options(dplyr.summarise.inform = FALSE)
cv_error <- matrix(NA, nrow = 30 * 3, ncol = 2)
cv_error[, 1] <- rep(c(2, 5, 10), each = 30)
row <- 0
for(k in c(2, 5, 10)) {
for(i in 0:29) {
row <- row + 1
cv_error[row, 2] <- my_rf_cv(k)
}
}
devtools::document()
data("my_penguins")
options(dplyr.summarise.inform = FALSE)
cv_error <- matrix(NA, nrow = 30 * 3, ncol = 2)
cv_error[, 1] <- rep(c(2, 5, 10), each = 30)
row <- 0
for(k in c(2, 5, 10)) {
for(i in 0:29) {
row <- row + 1
cv_error[row, 2] <- my_rf_cv(k)
}
}
data("my_penguins")
options(dplyr.summarise.inform = FALSE)
cv_error <- matrix(NA, nrow = 30 * 3, ncol = 2)
cv_error[, 1] <- rep(c(2, 5, 10), each = 30)
row <- 0
for(k in c(2, 5, 10)) {
for(i in 0:29) {
row <- row + 1
cv_error[row, 2] <- my_rf_cv(k)
}
}
library(HaoZheng)
require(HaoZheng)
library(randomForest)
library(stringr)
library(class)
library(ggplot2)
library(kableExtra)
library(dplyr,warn.conflicts = FALSE)
data("my_gapminder")
data("my_penguins")
my_penguins_df <- my_penguins
my_penguins_df <- na.omit(my_penguins_df)
data("my_penguins")
options(dplyr.summarise.inform = FALSE)
cv_error <- matrix(NA, nrow = 30 * 3, ncol = 2)
cv_error[, 1] <- rep(c(2, 5, 10), each = 30)
row <- 0
for(k in c(2, 5, 10)) {
for(i in 0:29) {
row <- row + 1
cv_error[row, 2] <- my_rf_cv(k)
}
}
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
require(HaoZheng)
library(randomForest)
library(stringr)
library(class)
library(ggplot2)
library(kableExtra)
library(dplyr,warn.conflicts = FALSE)
data("my_gapminder")
data("my_penguins")
my_penguins_df <- my_penguins
my_penguins_df <- na.omit(my_penguins_df)
my_t.test(my_gapminder$lifeExp, "two.sided", 60)
my_t.test(my_gapminder$lifeExp, "less", 60)
my_t.test(my_gapminder$lifeExp, "greater", 60)
lm_1 <- my_lm(lifeExp ~ gdpPercap + continent, data = my_gapminder)
lm_1
object <- lifeExp ~ gdpPercap + continent
model <- model.frame(object, my_gapminder)
exp  <- model.matrix(object, my_gapminder)
res <- model.response(model) %>% as.matrix()
my_lifeExp <- exp %*% lm_1[,1]+ lm_1[,2]
my_plot <- data.frame("actual" = my_gapminder$lifeExp, "fitted" = my_lifeExp,
"color" = my_gapminder$continent)
my_plot %>%
ggplot(aes(x = my_lifeExp, y = my_gapminder$lifeExp, color = color)) +
geom_point() +
coord_flip() +
labs(title = "Actual vs. Fitted Values", x = "fitted",
y = "actual", color = "Continent")
# TODO: my_knn function is wrong for the output
answer <- matrix(NA, nrow = 10, ncol = 2)
rownames(answer) <- c(1:10)
for (i in 1:10) {
output <- my_knn_cv(my_penguins_df[,3:6], my_penguins_df$species, i, 5)
answer[i, 1] <- output$ce
answer[i, 2] <- output$te
}
answer <- data.frame("Neighbour's number" = c(1:10),
"cv misclassification rate" = answer[, 1],
"training misclassification rate" = answer[, 2])
kable_styling(kable(answer))
data("my_penguins")
options(dplyr.summarise.inform = FALSE)
cv_error <- matrix(NA, nrow = 30 * 3, ncol = 2)
cv_error[, 1] <- rep(c(2, 5, 10), each = 30)
row <- 0
for(k in c(2, 5, 10)) {
for(i in 0:29) {
row <- row + 1
cv_error[row, 2] <- my_rf_cv(k)
}
}
#data("my_penguins")
my_df <- data.frame("mse" = cv_error[, 2], "k" = cv_error[, 1])
my_df %>%
ggplot(aes(x = factor(k), y = mse)) +
geom_boxplot() +
labs(title = "MSE", x = "Folds number", y = "MSE")
mse_sum <- my_df %>%
group_by(k) %>%
summarise(mean = mean(mse), sd = sd(mse))
kable_styling(kable(mse_sum))
devtools::check()
library(randomForest)
devtools::document()
devtools::check()
devtools::check()
#require(HaoZheng)
library(HaoZheng)
library(randomForest)
library(stringr)
library(class)
library(ggplot2)
library(kableExtra)
library(dplyr,warn.conflicts = FALSE)
data("my_gapminder")
data("my_penguins")
my_penguins_df <- my_penguins
my_penguins_df <- na.omit(my_penguins_df)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
#require(HaoZheng)
library(HaoZheng)
library(randomForest)
library(stringr)
library(class)
library(ggplot2)
library(kableExtra)
library(dplyr,warn.conflicts = FALSE)
data("my_gapminder")
data("my_penguins")
my_penguins_df <- my_penguins
my_penguins_df <- na.omit(my_penguins_df)
my_t.test(my_gapminder$lifeExp, "two.sided", 60)
my_t.test(my_gapminder$lifeExp, "less", 60)
my_t.test(my_gapminder$lifeExp, "greater", 60)
lm_1 <- my_lm(lifeExp ~ gdpPercap + continent, data = my_gapminder)
lm_1
object <- lifeExp ~ gdpPercap + continent
model <- model.frame(object, my_gapminder)
exp  <- model.matrix(object, my_gapminder)
res <- model.response(model) %>% as.matrix()
my_lifeExp <- exp %*% lm_1[,1]+ lm_1[,2]
my_plot <- data.frame("actual" = my_gapminder$lifeExp, "fitted" = my_lifeExp,
"color" = my_gapminder$continent)
my_plot %>%
ggplot(aes(x = my_lifeExp, y = my_gapminder$lifeExp, color = color)) +
geom_point() +
coord_flip() +
labs(title = "Actual vs. Fitted Values", x = "fitted",
y = "actual", color = "Continent")
# TODO: my_knn function is wrong for the output
answer <- matrix(NA, nrow = 10, ncol = 2)
rownames(answer) <- c(1:10)
for (i in 1:10) {
output <- my_knn_cv(my_penguins_df[,3:6], my_penguins_df$species, i, 5)
answer[i, 1] <- output$ce
answer[i, 2] <- output$te
}
answer <- data.frame("Neighbour's number" = c(1:10),
"cv misclassification rate" = answer[, 1],
"training misclassification rate" = answer[, 2])
kable_styling(kable(answer))
data("my_penguins")
options(dplyr.summarise.inform = FALSE)
cv_error <- matrix(NA, nrow = 30 * 3, ncol = 2)
cv_error[, 1] <- rep(c(2, 5, 10), each = 30)
row <- 0
for(k in c(2, 5, 10)) {
for(i in 0:29) {
row <- row + 1
cv_error[row, 2] <- my_rf_cv(k)
}
}
#data("my_penguins")
my_df <- data.frame("mse" = cv_error[, 2], "k" = cv_error[, 1])
my_df %>%
ggplot(aes(x = factor(k), y = mse)) +
geom_boxplot() +
labs(title = "MSE", x = "Folds number", y = "MSE")
mse_sum <- my_df %>%
group_by(k) %>%
summarise(mean = mean(mse), sd = sd(mse))
kable_styling(kable(mse_sum))
devtools::check()
devtools::check()
