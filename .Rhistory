answer[i, 2] <- output$te
}
answer <- data.frame("Neighbour's number" = c(1:10),
"cv misclassification rate" = answer[, 1],
"training misclassification rate" = answer[, 2])
kable_styling(kable(answer))
devtools::check()
install.packges("class")
install.packages("class")
library(class)
devtools::document()
devlto
devtools::check()
devtools::document()
devtools::check()
usethis::use_pipe()
devtools::check()
data(my_penguins)
my_penguins <- drop_na(my_penguins)
my_knn_cv(my_penguins[, 3:6], my_penguins$species, 1, 5)
data(my_penguins)
my_penguins <- tidyr::drop_na(my_penguins)
my_knn_cv(my_penguins[, 3:6], my_penguins$species, 1, 5)
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
data("my_penguins")
options(dplyr.summarise.inform = FALSE)
cv_error <- matrix(NA, nrow = 30 * 3, ncol = 2)
cv_error[, 1] <- rep(c(2, 5, 10), each = 30)
row <- 0
for(k in c(2, 5, 10)) {
for(i in 0:29) {
row <- row + 1
cv_error[row, 2] <- my_rf_cv(k)
}
}
View(my_penguins)
View(my_penguins)
require(HaoZheng)
library(randomForest)
library(stringr)
library(class)
library(ggplot2)
library(kableExtra)
library(dplyr,warn.conflicts = FALSE)
data("my_gapminder")
data("my_penguins")
my_penguins_df <- my_penguins
my_penguins_df <- na.omit(my_penguins_df)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
require(HaoZheng)
library(randomForest)
library(stringr)
library(class)
library(ggplot2)
library(kableExtra)
library(dplyr,warn.conflicts = FALSE)
data("my_gapminder")
data("my_penguins")
my_penguins_df <- my_penguins
my_penguins_df <- na.omit(my_penguins_df)
my_t.test(my_gapminder$lifeExp, "two.sided", 60)
my_t.test(my_gapminder$lifeExp, "less", 60)
my_t.test(my_gapminder$lifeExp, "greater", 60)
lm_1 <- my_lm(lifeExp ~ gdpPercap + continent, data = my_gapminder)
lm_1
object <- lifeExp ~ gdpPercap + continent
model <- model.frame(object, my_gapminder)
exp  <- model.matrix(object, my_gapminder)
res <- model.response(model) %>% as.matrix()
my_lifeExp <- exp %*% lm_1[,1]+ lm_1[,2]
my_plot <- data.frame("actual" = my_gapminder$lifeExp, "fitted" = my_lifeExp,
"color" = my_gapminder$continent)
my_plot %>%
ggplot(aes(x = my_lifeExp, y = my_gapminder$lifeExp, color = color)) +
geom_point() +
coord_flip() +
labs(title = "Actual vs. Fitted Values", x = "fitted",
y = "actual", color = "Continent")
# TODO: my_knn function is wrong for the output
answer <- matrix(NA, nrow = 10, ncol = 2)
rownames(answer) <- c(1:10)
for (i in 1:10) {
output <- my_knn_cv(my_penguins_df[,3:6], my_penguins_df$species, i, 5)
answer[i, 1] <- output$ce
answer[i, 2] <- output$te
}
answer <- data.frame("Neighbour's number" = c(1:10),
"cv misclassification rate" = answer[, 1],
"training misclassification rate" = answer[, 2])
kable_styling(kable(answer))
data("my_penguins")
options(dplyr.summarise.inform = FALSE)
cv_error <- matrix(NA, nrow = 30 * 3, ncol = 2)
cv_error[, 1] <- rep(c(2, 5, 10), each = 30)
row <- 0
for(k in c(2, 5, 10)) {
for(i in 0:29) {
row <- row + 1
cv_error[row, 2] <- my_rf_cv(k)
}
}
data("my_penguins")
options(dplyr.summarise.inform = FALSE)
cv_error <- matrix(NA, nrow = 30 * 3, ncol = 2)
cv_error[, 1] <- rep(c(2, 5, 10), each = 30)
row <- 0
for(k in c(2, 5, 10)) {
for(i in 0:29) {
row <- row + 1
cv_error[row, 2] <- my_rf_cv(k)
}
}
data("my_penguins")
options(dplyr.summarise.inform = FALSE)
cv_error <- matrix(NA, nrow = 30 * 3, ncol = 2)
cv_error[, 1] <- rep(c(2, 5, 10), each = 30)
row <- 1
for(k in c(2, 5, 10)) {
for(i in 1:30) {
cv_error[row, 2] <- my_rf_cv(k)
row <- row + 1
}
}
data("my_penguins")
options(dplyr.summarise.inform = FALSE)
cv_error <- matrix(NA, nrow = 30 * 3, ncol = 2)
cv_error[, 1] <- rep(c(2, 5, 10), each = 30)
row <- 0
for(k in c(2, 5, 10)) {
for(i in 0:29) {
row <- row + 1
cv_error[row, 2] <- my_rf_cv(k)
}
}
data("my_penguins")
options(dplyr.summarise.inform = FALSE)
cv_error <- matrix(NA, nrow = 30 * 3, ncol = 2)
cv_error[, 1] <- rep(c(2, 5, 10), each = 30)
row <- 0
for(k in c(2, 5, 10)) {
for(i in 0:29) {
row <- row + 1
cv_error[row, 2] <- my_rf_cv(k)
}
}
data("my_penguins")
options(dplyr.summarise.inform = FALSE)
cv_error <- matrix(NA, nrow = 30 * 3, ncol = 2)
cv_error[, 1] <- rep(c(2, 5, 10), each = 30)
row <- 0
for(k in c(2, 5, 10)) {
for(i in 0:29) {
row <- row + 1
cv_error[row, 2] <- my_rf_cv(k)
}
}
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
require(HaoZheng)
library(randomForest)
library(stringr)
library(class)
library(ggplot2)
library(kableExtra)
library(dplyr,warn.conflicts = FALSE)
data("my_gapminder")
data("my_penguins")
my_penguins_df <- my_penguins
my_penguins_df <- na.omit(my_penguins_df)
my_t.test(my_gapminder$lifeExp, "two.sided", 60)
my_t.test(my_gapminder$lifeExp, "less", 60)
my_t.test(my_gapminder$lifeExp, "greater", 60)
lm_1 <- my_lm(lifeExp ~ gdpPercap + continent, data = my_gapminder)
lm_1
object <- lifeExp ~ gdpPercap + continent
model <- model.frame(object, my_gapminder)
exp  <- model.matrix(object, my_gapminder)
res <- model.response(model) %>% as.matrix()
my_lifeExp <- exp %*% lm_1[,1]+ lm_1[,2]
my_plot <- data.frame("actual" = my_gapminder$lifeExp, "fitted" = my_lifeExp,
"color" = my_gapminder$continent)
my_plot %>%
ggplot(aes(x = my_lifeExp, y = my_gapminder$lifeExp, color = color)) +
geom_point() +
coord_flip() +
labs(title = "Actual vs. Fitted Values", x = "fitted",
y = "actual", color = "Continent")
# TODO: my_knn function is wrong for the output
answer <- matrix(NA, nrow = 10, ncol = 2)
rownames(answer) <- c(1:10)
for (i in 1:10) {
output <- my_knn_cv(my_penguins_df[,3:6], my_penguins_df$species, i, 5)
answer[i, 1] <- output$ce
answer[i, 2] <- output$te
}
answer <- data.frame("Neighbour's number" = c(1:10),
"cv misclassification rate" = answer[, 1],
"training misclassification rate" = answer[, 2])
kable_styling(kable(answer))
data("my_penguins")
options(dplyr.summarise.inform = FALSE)
cv_error <- matrix(NA, nrow = 30 * 3, ncol = 2)
cv_error[, 1] <- rep(c(2, 5, 10), each = 30)
row <- 0
for(k in c(2, 5, 10)) {
for(i in 0:29) {
row <- row + 1
cv_error[row, 2] <- my_rf_cv(k)
}
}
devtools::document()
data("my_penguins")
options(dplyr.summarise.inform = FALSE)
cv_error <- matrix(NA, nrow = 30 * 3, ncol = 2)
cv_error[, 1] <- rep(c(2, 5, 10), each = 30)
row <- 0
for(k in c(2, 5, 10)) {
for(i in 0:29) {
row <- row + 1
cv_error[row, 2] <- my_rf_cv(k)
}
}
data("my_penguins")
options(dplyr.summarise.inform = FALSE)
cv_error <- matrix(NA, nrow = 30 * 3, ncol = 2)
cv_error[, 1] <- rep(c(2, 5, 10), each = 30)
row <- 0
for(k in c(2, 5, 10)) {
for(i in 0:29) {
row <- row + 1
cv_error[row, 2] <- my_rf_cv(k)
}
}
library(HaoZheng)
require(HaoZheng)
library(randomForest)
library(stringr)
library(class)
library(ggplot2)
library(kableExtra)
library(dplyr,warn.conflicts = FALSE)
data("my_gapminder")
data("my_penguins")
my_penguins_df <- my_penguins
my_penguins_df <- na.omit(my_penguins_df)
data("my_penguins")
options(dplyr.summarise.inform = FALSE)
cv_error <- matrix(NA, nrow = 30 * 3, ncol = 2)
cv_error[, 1] <- rep(c(2, 5, 10), each = 30)
row <- 0
for(k in c(2, 5, 10)) {
for(i in 0:29) {
row <- row + 1
cv_error[row, 2] <- my_rf_cv(k)
}
}
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
require(HaoZheng)
library(randomForest)
library(stringr)
library(class)
library(ggplot2)
library(kableExtra)
library(dplyr,warn.conflicts = FALSE)
data("my_gapminder")
data("my_penguins")
my_penguins_df <- my_penguins
my_penguins_df <- na.omit(my_penguins_df)
my_t.test(my_gapminder$lifeExp, "two.sided", 60)
my_t.test(my_gapminder$lifeExp, "less", 60)
my_t.test(my_gapminder$lifeExp, "greater", 60)
lm_1 <- my_lm(lifeExp ~ gdpPercap + continent, data = my_gapminder)
lm_1
object <- lifeExp ~ gdpPercap + continent
model <- model.frame(object, my_gapminder)
exp  <- model.matrix(object, my_gapminder)
res <- model.response(model) %>% as.matrix()
my_lifeExp <- exp %*% lm_1[,1]+ lm_1[,2]
my_plot <- data.frame("actual" = my_gapminder$lifeExp, "fitted" = my_lifeExp,
"color" = my_gapminder$continent)
my_plot %>%
ggplot(aes(x = my_lifeExp, y = my_gapminder$lifeExp, color = color)) +
geom_point() +
coord_flip() +
labs(title = "Actual vs. Fitted Values", x = "fitted",
y = "actual", color = "Continent")
# TODO: my_knn function is wrong for the output
answer <- matrix(NA, nrow = 10, ncol = 2)
rownames(answer) <- c(1:10)
for (i in 1:10) {
output <- my_knn_cv(my_penguins_df[,3:6], my_penguins_df$species, i, 5)
answer[i, 1] <- output$ce
answer[i, 2] <- output$te
}
answer <- data.frame("Neighbour's number" = c(1:10),
"cv misclassification rate" = answer[, 1],
"training misclassification rate" = answer[, 2])
kable_styling(kable(answer))
data("my_penguins")
options(dplyr.summarise.inform = FALSE)
cv_error <- matrix(NA, nrow = 30 * 3, ncol = 2)
cv_error[, 1] <- rep(c(2, 5, 10), each = 30)
row <- 0
for(k in c(2, 5, 10)) {
for(i in 0:29) {
row <- row + 1
cv_error[row, 2] <- my_rf_cv(k)
}
}
#data("my_penguins")
my_df <- data.frame("mse" = cv_error[, 2], "k" = cv_error[, 1])
my_df %>%
ggplot(aes(x = factor(k), y = mse)) +
geom_boxplot() +
labs(title = "MSE", x = "Folds number", y = "MSE")
mse_sum <- my_df %>%
group_by(k) %>%
summarise(mean = mean(mse), sd = sd(mse))
kable_styling(kable(mse_sum))
devtools::check()
library(randomForest)
devtools::document()
devtools::check()
devtools::check()
#require(HaoZheng)
library(HaoZheng)
library(randomForest)
library(stringr)
library(class)
library(ggplot2)
library(kableExtra)
library(dplyr,warn.conflicts = FALSE)
data("my_gapminder")
data("my_penguins")
my_penguins_df <- my_penguins
my_penguins_df <- na.omit(my_penguins_df)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
#require(HaoZheng)
library(HaoZheng)
library(randomForest)
library(stringr)
library(class)
library(ggplot2)
library(kableExtra)
library(dplyr,warn.conflicts = FALSE)
data("my_gapminder")
data("my_penguins")
my_penguins_df <- my_penguins
my_penguins_df <- na.omit(my_penguins_df)
my_t.test(my_gapminder$lifeExp, "two.sided", 60)
my_t.test(my_gapminder$lifeExp, "less", 60)
my_t.test(my_gapminder$lifeExp, "greater", 60)
lm_1 <- my_lm(lifeExp ~ gdpPercap + continent, data = my_gapminder)
lm_1
object <- lifeExp ~ gdpPercap + continent
model <- model.frame(object, my_gapminder)
exp  <- model.matrix(object, my_gapminder)
res <- model.response(model) %>% as.matrix()
my_lifeExp <- exp %*% lm_1[,1]+ lm_1[,2]
my_plot <- data.frame("actual" = my_gapminder$lifeExp, "fitted" = my_lifeExp,
"color" = my_gapminder$continent)
my_plot %>%
ggplot(aes(x = my_lifeExp, y = my_gapminder$lifeExp, color = color)) +
geom_point() +
coord_flip() +
labs(title = "Actual vs. Fitted Values", x = "fitted",
y = "actual", color = "Continent")
# TODO: my_knn function is wrong for the output
answer <- matrix(NA, nrow = 10, ncol = 2)
rownames(answer) <- c(1:10)
for (i in 1:10) {
output <- my_knn_cv(my_penguins_df[,3:6], my_penguins_df$species, i, 5)
answer[i, 1] <- output$ce
answer[i, 2] <- output$te
}
answer <- data.frame("Neighbour's number" = c(1:10),
"cv misclassification rate" = answer[, 1],
"training misclassification rate" = answer[, 2])
kable_styling(kable(answer))
data("my_penguins")
options(dplyr.summarise.inform = FALSE)
cv_error <- matrix(NA, nrow = 30 * 3, ncol = 2)
cv_error[, 1] <- rep(c(2, 5, 10), each = 30)
row <- 0
for(k in c(2, 5, 10)) {
for(i in 0:29) {
row <- row + 1
cv_error[row, 2] <- my_rf_cv(k)
}
}
#data("my_penguins")
my_df <- data.frame("mse" = cv_error[, 2], "k" = cv_error[, 1])
my_df %>%
ggplot(aes(x = factor(k), y = mse)) +
geom_boxplot() +
labs(title = "MSE", x = "Folds number", y = "MSE")
mse_sum <- my_df %>%
group_by(k) %>%
summarise(mean = mean(mse), sd = sd(mse))
kable_styling(kable(mse_sum))
devtools::check()
devtools::check()
test_that("non-numeric input throws error", {
expect_error(f_to_c("a string"))
})
usethis::use_test("my_t.test")
usethis::use_test("my_t.test")
usethis::use_test("my_lm")
usethis::use_test("my_knn_cv")
devtools::check()
devtools::check()
devtools::check()
devtools::check()
usethis::use_test("my_rf_cv")
dev
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
usethis::use_test("my_t.test.R")
usethis::use_test("my_t\.test.R")
usethis::use_test("my_t/.test.R")
usethis::use_test("my_t.test.R")
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
knitr::opts_chunk$set(echo = TRUE)
# elimnate the rows with empty value
penguins_df <- na.omit(penguins_df)
library(palmerpenguins)
data(package = "palmerpenguins")
penguins_df <- penguins
penguins_df <- na.omit(penguins_df)
# import the package to be used
library(class)
library(tidyverse)
library(stringr)
library(randomForest)
# elimnate the rows with empty value
penguins_df <- na.omit(penguins_df)
# Function:  predict output class species using covariates
# @param train: dataframe used to predict output
# @param cl: class value of training dataset
# @param k_nn: a number specify the quantity of neighbours
# @para k_cv: number of folding
# @param output: a list of output including the information we need
my_knn_cv <- function (train, cl, k_nn, k_cv) {
l <- length(cl)
fold <- sample(rep(1:k_cv, length = l))
data <- data.frame("x" = train, "y" = cl, "split" = fold)
class <- c()
cv_err <- rep(NA, k_cv)
# iterate through k times
for (i in 1:k_cv) {
# select the rows of train
data_train <- data %>% filter(split != i)
# slect the rows of test
data_test <- data %>% filter(split == i)
data_train_14 <- data_train[,1:4]
data_test_14 <- data_test[,1:4]
y_hat <- as.character(knn(data_train_14, data_test_14, data_train$y, k_nn))
class <- c(class, y_hat)
cv_err[i] = sum(as.numeric(y_hat != as.character(data_test$y))) / l / k_cv
}
y_hat <- as.character(knn(train = train, cl = cl, test = train, k = k_nn))
# calculate the train error
train_err <- sum(as.numeric(y_hat != as.character(cl))) / length(cl)
print(train_err)
# return the class, cvv_err and the train_err
# train error is calculated within the function
# the list of output has three objects
output <- list("Class" = class, "ce" = mean(cv_err), "te" = train_err)
return(output)
}
# apply it to the penguins data(penguins_df) and prove it works
# with k_nn = 1, k_cv = 5
test_1 <- my_knn_cv(penguins_df[, 3:6], penguins_df$species, 1, 5)
type(test_1)
test_1
typeof(test_1)
devtools::check()
devtools::check()
# apply it to the penguins data(penguins_df) and prove it works
# with k_nn = 1, k_cv = 5
test_1 <- my_knn_cv(penguins_df[, 3:6], penguins_df$species, 1, 5)
typeof(test_1)
devtools::check()
