labs(title = "Actual vs. Fitted Values", x = "fitted",
y = "actual", color = "Continent")
#storing lifeExp lm model in my_model
my_model <- lm(lifeExp ~ gdpPercap + continent, my_gapminder)
#getting fitted values
model_fitted <- fitted(my_model)
#stores actual data and fitted data in data frame
my_df <- data.frame(actual = my_gapminder$lifeExp,
fitted = model_fitted,
continent = my_gapminder$continent)
#creates g_gapminder actual vs fitted data graph
g_gapminder <- ggplot2::ggplot(data = my_df,
ggplot2::aes(x = fitted,
y = actual,
color = continent)) +
ggplot2::geom_point() +
ggplot2::geom_abline(slope = 1, intercept = 0,
col = "red", lty = 2) +
ggplot2::theme_bw(base_size = 20) +
ggplot2::labs(x = "Fitted Values", y = "Actual Values",
title =
"Gapminder life expectancy: Actual vs Fitted") +
ggplot2::scale_x_continuous()
#display g_gapminder object
g_gapminder
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
#sometimes library() does not work, we can use the require()
#require(HaoZheng)
library(HaoZheng)
library(randomForest)
library(stringr)
library(class)
library(ggplot2)
library(kableExtra)
library(dplyr,warn.conflicts = FALSE)
data("my_gapminder")
data("my_penguins")
# change my_penguins so that there is no empty value in it
my_penguins_df <- my_penguins
my_penguins_df <- na.omit(my_penguins_df)
# do a two sided t.test with mu = 60
my_t.test(my_gapminder$lifeExp, "two.sided", 60)
# do a one sided t.test with mu = 60
my_t.test(my_gapminder$lifeExp, "less", 60)
# do a one sided t.test with mu = 60
my_t.test(my_gapminder$lifeExp, "greater", 60)
#using my_lm to fit the values
lm_1 <- my_lm(lifeExp ~ gdpPercap + continent, data = my_gapminder)
lm_1
#storing lifeExp lm model in my_model
my_model <- lm(lifeExp ~ gdpPercap + continent, my_gapminder)
#getting fitted values
model_fitted <- fitted(my_model)
#stores actual data and fitted data in data frame
my_df <- data.frame(actual = my_gapminder$lifeExp,
fitted = model_fitted,
continent = my_gapminder$continent)
#creates g_gapminder actual vs fitted data graph
g_gapminder <- ggplot2::ggplot(data = my_df,
ggplot2::aes(x = fitted,
y = actual,
color = continent)) +
ggplot2::geom_point() +
ggplot2::geom_abline(slope = 1, intercept = 0,
col = "red", lty = 2) +
ggplot2::theme_bw(base_size = 20) +
ggplot2::labs(x = "Fitted Values", y = "Actual Values",
title =
"Gapminder life expectancy: Actual vs Fitted") +
ggplot2::scale_x_continuous()
#display g_gapminder object
g_gapminder
# set up the data
object <- lifeExp ~ gdpPercap + continent
model <- model.frame(object, my_gapminder)
exp  <- model.matrix(object, my_gapminder)
res <- model.response(model) %>% as.matrix()
# plot actual vs fitted
my_lifeExp <- exp %*% lm_1[,1]+ lm_1[,2]
my_plot <- data.frame("actual" = my_gapminder$lifeExp, "fitted" = my_lifeExp,
"color" = my_gapminder$continent)
my_plot %>%
ggplot(aes(x = my_lifeExp, y = my_gapminder$lifeExp,
color = my_gapminder$continent)) +
geom_abline(slope = 1, intercept = 0, col = "black") +
geom_point() +
coord_flip() +
labs(title = "Actual vs. Fitted Values", x = "fitted",
y = "actual", color = "Continent")
# create the matrix
answer <- matrix(NA, nrow = 10, ncol = 2)
rownames(answer) <- c(1:10)
for (i in 1:10) {
output <- my_knn_cv(my_penguins_df[,3:6], my_penguins_df$species, i, 5)
answer[i, 1] <- output$ce
answer[i, 2] <- output$te
}
#storing lifeExp lm model in my_model
my_model <- lm(lifeExp ~ gdpPercap + continent, my_gapminder)
#getting fitted values
model_fitted <- fitted(my_model)
#stores actual data and fitted data in data frame
my_df <- data.frame(actual = my_gapminder$lifeExp,
fitted = model_fitted,
continent = my_gapminder$continent)
#creates actual vs fitted data graph
my_plot %>%
ggplot(aes(x = my_lifeExp, y = my_gapminder$lifeExp,
color = my_gapminder$continent)) +
geom_abline(slope = 1, intercept = 0, col = "black") +
geom_point() +
coord_flip() +
labs(title = "Actual vs. Fitted Values", x = "fitted",
y = "actual", color = "Continent")
#display g_gapminder object
g_gapminder
#storing lifeExp lm model in my_model
my_model <- lm(lifeExp ~ gdpPercap + continent, my_gapminder)
#getting fitted values
model_fitted <- fitted(my_model)
#stores actual data and fitted data in data frame
my_df <- data.frame(actual = my_gapminder$lifeExp,
fitted = model_fitted,
continent = my_gapminder$continent)
#creates actual vs fitted data graph
my_plot %>%
ggplot(aes(x = my_lifeExp, y = my_gapminder$lifeExp,
color = my_gapminder$continent)) +
geom_abline(slope = 1, intercept = 0, col = "black") +
geom_point() +
coord_flip() +
labs(title = "Actual vs. Fitted Values", x = "fitted",
y = "actual", color = "Continent")
#display g_gapminder object
my_plot
# create the matrix
answer <- matrix(NA, nrow = 10, ncol = 2)
rownames(answer) <- c(1:10)
for (i in 1:10) {
output <- my_knn_cv(my_penguins_df[,3:6], my_penguins_df$species, i, 5)
answer[i, 1] <- output$ce
answer[i, 2] <- output$te
}
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
#sometimes library() does not work, we can use the require()
#require(HaoZheng)
library(HaoZheng)
library(randomForest)
library(stringr)
library(class)
library(ggplot2)
library(kableExtra)
library(dplyr,warn.conflicts = FALSE)
data("my_gapminder")
data("my_penguins")
# change my_penguins so that there is no empty value in it
my_penguins_df <- my_penguins
my_penguins_df <- na.omit(my_penguins_df)
# do a two sided t.test with mu = 60
my_t.test(my_gapminder$lifeExp, "two.sided", 60)
# do a one sided t.test with mu = 60
my_t.test(my_gapminder$lifeExp, "less", 60)
# do a one sided t.test with mu = 60
my_t.test(my_gapminder$lifeExp, "greater", 60)
#using my_lm to fit the values
lm_1 <- my_lm(lifeExp ~ gdpPercap + continent, data = my_gapminder)
lm_1
#storing lifeExp lm model in my_model
my_model <- lm(lifeExp ~ gdpPercap + continent, my_gapminder)
#getting fitted values
model_fitted <- fitted(my_model)
#stores actual data and fitted data in data frame
my_df <- data.frame(actual = my_gapminder$lifeExp,
fitted = model_fitted,
continent = my_gapminder$continent)
#creates g_gapminder actual vs fitted data graph
g_gapminder <- ggplot2::ggplot(data = my_df,
ggplot2::aes(x = fitted,
y = actual,
color = continent)) +
ggplot2::geom_point() +
ggplot2::geom_abline(slope = 1, intercept = 0,
col = "red", lty = 2) +
ggplot2::theme_bw(base_size = 20) +
ggplot2::labs(x = "Fitted Values", y = "Actual Values",
title =
"Gapminder life expectancy: Actual vs Fitted") +
ggplot2::scale_x_continuous()
#display g_gapminder object
g_gapminder
# set up the data
object <- lifeExp ~ gdpPercap + continent
model <- model.frame(object, my_gapminder)
exp  <- model.matrix(object, my_gapminder)
res <- model.response(model) %>% as.matrix()
# plot actual vs fitted
my_lifeExp <- exp %*% lm_1[,1]+ lm_1[,2]
my_plot <- data.frame("actual" = my_gapminder$lifeExp, "fitted" = my_lifeExp,
"color" = my_gapminder$continent)
my_plot %>%
ggplot(aes(x = my_lifeExp, y = my_gapminder$lifeExp,
color = my_gapminder$continent)) +
geom_abline(slope = 1, intercept = 0, col = "black") +
geom_point() +
coord_flip() +
labs(title = "Actual vs. Fitted Values", x = "fitted",
y = "actual", color = "Continent")
# create the matrix
answer <- matrix(NA, nrow = 10, ncol = 2)
rownames(answer) <- c(1:10)
for (i in 1:10) {
output <- my_knn_cv(my_penguins_df[,3:6], my_penguins_df$species, i, 5)
answer[i, 1] <- output$ce
answer[i, 2] <- output$te
}
answer <- data.frame("Neighbour's number" = c(1:10),
"cv mis_class rate" = answer[, 1],
"training mis_class rate" = answer[, 2])
kable_styling(kable(answer))
# set up the data we need for fr_cv
#data("my_penguins")
options(dplyr.summarise.inform = FALSE)
cv_error <- matrix(NA, nrow = 30 * 3, ncol = 2)
cv_error[, 1] <- rep(c(2, 5, 10), each = 30)
row <- 0
for(k in c(2, 5, 10)) {
for(i in 0:29) {
row <- row + 1
cv_error[row, 2] <- my_rf_cv(k)
}
}
#create the ggplot
my_df <- data.frame("mse" = cv_error[, 2], "k" = cv_error[, 1])
my_df %>%
ggplot(aes(x = factor(k), y = mse)) +
geom_boxplot() +
labs(title = "MSE", x = "Folds number", y = "MSE")
mse_sum <- my_df %>%
group_by(k) %>%
summarise(mean = mean(mse), sd = sd(mse))
kable_styling(kable(mse_sum))
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
#sometimes library() does not work, we can use the require()
#require(HaoZheng)
library(HaoZheng)
library(randomForest)
library(stringr)
library(class)
library(ggplot2)
library(kableExtra)
library(dplyr,warn.conflicts = FALSE)
data("my_gapminder")
data("my_penguins")
# change my_penguins so that there is no empty value in it
my_penguins_df <- my_penguins
my_penguins_df <- na.omit(my_penguins_df)
# do a two sided t.test with mu = 60
my_t.test(my_gapminder$lifeExp, "two.sided", 60)
# do a one sided t.test with mu = 60
my_t.test(my_gapminder$lifeExp, "less", 60)
# do a one sided t.test with mu = 60
my_t.test(my_gapminder$lifeExp, "greater", 60)
#using my_lm to fit the values
lm_1 <- my_lm(lifeExp ~ gdpPercap + continent, data = my_gapminder)
lm_1
#storing lifeExp lm model in my_model
my_model <- lm(lifeExp ~ gdpPercap + continent, my_gapminder)
#getting fitted values
model_fitted <- fitted(my_model)
#stores actual data and fitted data in data frame
my_df <- data.frame(actual = my_gapminder$lifeExp,
fitted = model_fitted,
continent = my_gapminder$continent)
#creates g_gapminder actual vs fitted data graph
my_plot %>%
ggplot(aes(x = my_lifeExp, y = my_gapminder$lifeExp,
color = my_gapminder$continent)) +
geom_abline(slope = 1, intercept = 0, col = "black") +
geom_point() +
coord_flip() +
labs(title = "Actual vs. Fitted Values", x = "fitted",
y = "actual", color = "Continent")
#storing lifeExp lm model in my_model
my_model <- lm(lifeExp ~ gdpPercap + continent, my_gapminder)
#getting fitted values
model_fitted <- fitted(my_model)
#stores actual data and fitted data in data frame
my_df <- data.frame(actual = my_gapminder$lifeExp,
fitted = model_fitted,
continent = my_gapminder$continent)
#creates g_gapminder actual vs fitted data graph
my_plot %>%
ggplot(aes(x = my_model, y = model_fitted,
color = my_gapminder$continent)) +
geom_abline(slope = 1, intercept = 0, col = "black") +
geom_point() +
coord_flip() +
labs(title = "Actual vs. Fitted Values", x = "fitted",
y = "actual", color = "Continent")
#storing lifeExp lm model in my_model
my_model <- lm(lifeExp ~ gdpPercap + continent, my_gapminder)
#getting fitted values
model_fitted <- fitted(my_model)
#stores actual data and fitted data in data frame
my_plot <- data.frame(actual = my_gapminder$lifeExp,
fitted = model_fitted,
continent = my_gapminder$continent)
#creates g_gapminder actual vs fitted data graph
my_plot %>%
ggplot(aes(x = my_model, y = model_fitted,
color = my_gapminder$continent)) +
geom_abline(slope = 1, intercept = 0, col = "black") +
geom_point() +
coord_flip() +
labs(title = "Actual vs. Fitted Values", x = "fitted",
y = "actual", color = "Continent")
#storing lifeExp lm model in my_model
my_model <- lm(lifeExp ~ gdpPercap + continent, my_gapminder)
#getting fitted values
model_fitted <- fitted(my_model)
#stores actual data and fitted data in data frame
my_df <- data.frame(actual = my_gapminder$lifeExp,
fitted = model_fitted,
continent = my_gapminder$continent)
#creates g_gapminder actual vs fitted data graph
g_gapminder <- ggplot2::ggplot(data = my_df,
ggplot2::aes(x = fitted,
y = actual,
color = continent)) +
ggplot2::geom_point() +
ggplot2::geom_abline(slope = 1, intercept = 0,
col = "red", lty = 2) +
ggplot2::theme_bw(base_size = 20) +
ggplot2::labs(x = "Fitted Values", y = "Actual Values",
title =
"Gapminder life expectancy: Actual vs Fitted") +
ggplot2::scale_x_continuous()
#display g_gapminder object
g_gapminder
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
#sometimes library() does not work, we can use the require()
#require(HaoZheng)
library(HaoZheng)
library(randomForest)
library(stringr)
library(class)
library(ggplot2)
library(kableExtra)
library(dplyr,warn.conflicts = FALSE)
data("my_gapminder")
data("my_penguins")
# change my_penguins so that there is no empty value in it
my_penguins_df <- my_penguins
my_penguins_df <- na.omit(my_penguins_df)
# do a two sided t.test with mu = 60
my_t.test(my_gapminder$lifeExp, "two.sided", 60)
# do a one sided t.test with mu = 60
my_t.test(my_gapminder$lifeExp, "less", 60)
# do a one sided t.test with mu = 60
my_t.test(my_gapminder$lifeExp, "greater", 60)
#using my_lm to fit the values
lm_1 <- my_lm(lifeExp ~ gdpPercap + continent, data = my_gapminder)
lm_1
#storing lifeExp lm model in model
model <- lm(lifeExp ~ gdpPercap + continent, my_gapminder)
#getting fitted values
fitted <- fitted(model)
#stores actual data and fitted data in data frame
my_df <- data.frame(actual = my_gapminder$lifeExp,
fitted = fitted,
continent = my_gapminder$continent)
#creates g_gapminder actual vs fitted data graph
my_plot <- ggplot(data = my_df,
ggplot2::aes(x = fitted,
y = actual,
color = continent)) +
geom_point() + coord_flip() +
geom_abline(slope = 1, intercept = 0,
col = "red", lty = 2) +
theme_bw(base_size = 20) +
labs(x = "Fitted Values", y = "Actual Values",
title =
"Gapminder life expectancy: Actual vs Fitted") +
scale_x_continuous()
#display g_gapminder object
my_plot
# create the matrix
answer <- matrix(NA, nrow = 10, ncol = 2)
rownames(answer) <- c(1:10)
for (i in 1:10) {
output <- my_knn_cv(my_penguins_df[,3:6], my_penguins_df$species, i, 5)
answer[i, 1] <- output$ce
answer[i, 2] <- output$te
}
answer <- data.frame("Neighbour's number" = c(1:10),
"cv mis_class rate" = answer[, 1],
"training mis_class rate" = answer[, 2])
kable_styling(kable(answer))
# set up the data we need for fr_cv
#data("my_penguins")
options(dplyr.summarise.inform = FALSE)
cv_error <- matrix(NA, nrow = 30 * 3, ncol = 2)
cv_error[, 1] <- rep(c(2, 5, 10), each = 30)
row <- 0
for(k in c(2, 5, 10)) {
for(i in 0:29) {
row <- row + 1
cv_error[row, 2] <- my_rf_cv(k)
}
}
#create the ggplot
my_df <- data.frame("mse" = cv_error[, 2], "k" = cv_error[, 1])
my_df %>%
ggplot(aes(x = factor(k), y = mse)) +
geom_boxplot() +
labs(title = "MSE", x = "Folds number", y = "MSE")
mse_sum <- my_df %>%
group_by(k) %>%
summarise(mean = mean(mse), sd = sd(mse))
kable_styling(kable(mse_sum))
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
#sometimes library() does not work, we can use the require()
#require(HaoZheng)
library(HaoZheng)
library(randomForest)
library(stringr)
library(class)
library(ggplot2)
library(kableExtra)
library(dplyr,warn.conflicts = FALSE)
data("my_gapminder")
data("my_penguins")
# change my_penguins so that there is no empty value in it
my_penguins_df <- my_penguins
my_penguins_df <- na.omit(my_penguins_df)
# do a two sided t.test with mu = 60
my_t.test(my_gapminder$lifeExp, "two.sided", 60)
# do a one sided t.test with mu = 60
my_t.test(my_gapminder$lifeExp, "less", 60)
# do a one sided t.test with mu = 60
my_t.test(my_gapminder$lifeExp, "greater", 60)
#using my_lm to fit the values
lm_1 <- my_lm(lifeExp ~ gdpPercap + continent, data = my_gapminder)
lm_1
#store in model
model <- lm(lifeExp ~ gdpPercap + continent, my_gapminder)
#store fitted values
fitted <- fitted(model)
#set up the data frame of fitted and actual
my_df <- data.frame(actual = my_gapminder$lifeExp,
fitted = fitted,
continent = my_gapminder$continent)
#create the plot
my_plot <- ggplot(data = my_df,
ggplot2::aes(x = fitted,
y = actual,
color = continent)) +
geom_point() + coord_flip() +
geom_abline(slope = 1, intercept = 0,
col = "red", lty = 2) +
labs(x = "Fitted Values", y = "Actual Values",
title = "Actual vs Fitted")
my_plot
# create the matrix
answer <- matrix(NA, nrow = 10, ncol = 2)
rownames(answer) <- c(1:10)
for (i in 1:10) {
output <- my_knn_cv(my_penguins_df[,3:6], my_penguins_df$species, i, 5)
answer[i, 1] <- output$ce
answer[i, 2] <- output$te
}
answer <- data.frame("Neighbour's number" = c(1:10),
"cv mis_class rate" = answer[, 1],
"training mis_class rate" = answer[, 2])
kable_styling(kable(answer))
# set up the data we need for fr_cv
#data("my_penguins")
options(dplyr.summarise.inform = FALSE)
cv_error <- matrix(NA, nrow = 30 * 3, ncol = 2)
cv_error[, 1] <- rep(c(2, 5, 10), each = 30)
row <- 0
for(k in c(2, 5, 10)) {
for(i in 0:29) {
row <- row + 1
cv_error[row, 2] <- my_rf_cv(k)
}
}
#create the ggplot
my_df <- data.frame("mse" = cv_error[, 2], "k" = cv_error[, 1])
my_df %>%
ggplot(aes(x = factor(k), y = mse)) +
geom_boxplot() +
labs(title = "MSE", x = "Folds number", y = "MSE")
mse_sum <- my_df %>%
group_by(k) %>%
summarise(mean = mean(mse), sd = sd(mse))
kable_styling(kable(mse_sum))
